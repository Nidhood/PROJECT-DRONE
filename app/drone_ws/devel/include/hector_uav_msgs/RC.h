// Generated by gencpp from file hector_uav_msgs/RC.msg
// DO NOT EDIT!


#ifndef HECTOR_UAV_MSGS_MESSAGE_RC_H
#define HECTOR_UAV_MSGS_MESSAGE_RC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace hector_uav_msgs
{
template <class ContainerAllocator>
struct RC_
{
  typedef RC_<ContainerAllocator> Type;

  RC_()
    : header()
    , status(0)
    , valid(false)
    , axis()
    , axis_function()
    , swit()
    , swit_function()  {
    }
  RC_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , status(0)
    , valid(false)
    , axis(_alloc)
    , axis_function(_alloc)
    , swit(_alloc)
    , swit_function(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _status_type;
  _status_type status;

   typedef uint8_t _valid_type;
  _valid_type valid;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _axis_type;
  _axis_type axis;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _axis_function_type;
  _axis_function_type axis_function;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _swit_type;
  _swit_type swit;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _swit_function_type;
  _swit_function_type swit_function;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ROLL)
  #undef ROLL
#endif
#if defined(_WIN32) && defined(PITCH)
  #undef PITCH
#endif
#if defined(_WIN32) && defined(YAW)
  #undef YAW
#endif
#if defined(_WIN32) && defined(STEER)
  #undef STEER
#endif
#if defined(_WIN32) && defined(HEIGHT)
  #undef HEIGHT
#endif
#if defined(_WIN32) && defined(THRUST)
  #undef THRUST
#endif
#if defined(_WIN32) && defined(BRAKE)
  #undef BRAKE
#endif

  enum {
    ROLL = 1u,
    PITCH = 2u,
    YAW = 3u,
    STEER = 4u,
    HEIGHT = 5u,
    THRUST = 6u,
    BRAKE = 7u,
  };


  typedef boost::shared_ptr< ::hector_uav_msgs::RC_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hector_uav_msgs::RC_<ContainerAllocator> const> ConstPtr;

}; // struct RC_

typedef ::hector_uav_msgs::RC_<std::allocator<void> > RC;

typedef boost::shared_ptr< ::hector_uav_msgs::RC > RCPtr;
typedef boost::shared_ptr< ::hector_uav_msgs::RC const> RCConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hector_uav_msgs::RC_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hector_uav_msgs::RC_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hector_uav_msgs::RC_<ContainerAllocator1> & lhs, const ::hector_uav_msgs::RC_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.status == rhs.status &&
    lhs.valid == rhs.valid &&
    lhs.axis == rhs.axis &&
    lhs.axis_function == rhs.axis_function &&
    lhs.swit == rhs.swit &&
    lhs.swit_function == rhs.swit_function;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hector_uav_msgs::RC_<ContainerAllocator1> & lhs, const ::hector_uav_msgs::RC_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hector_uav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hector_uav_msgs::RC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hector_uav_msgs::RC_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hector_uav_msgs::RC_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hector_uav_msgs::RC_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hector_uav_msgs::RC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hector_uav_msgs::RC_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hector_uav_msgs::RC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2691c2fe8c5ab2323146bdd8dd2e449e";
  }

  static const char* value(const ::hector_uav_msgs::RC_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2691c2fe8c5ab232ULL;
  static const uint64_t static_value2 = 0x3146bdd8dd2e449eULL;
};

template<class ContainerAllocator>
struct DataType< ::hector_uav_msgs::RC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hector_uav_msgs/RC";
  }

  static const char* value(const ::hector_uav_msgs::RC_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hector_uav_msgs::RC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"uint8 ROLL = 1\n"
"uint8 PITCH = 2\n"
"uint8 YAW = 3\n"
"uint8 STEER = 4\n"
"uint8 HEIGHT = 5\n"
"uint8 THRUST = 6\n"
"uint8 BRAKE = 7\n"
"\n"
"uint8 status\n"
"bool valid\n"
"\n"
"float32[] axis\n"
"uint8[] axis_function\n"
"\n"
"int8[] swit\n"
"uint8[] swit_function\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::hector_uav_msgs::RC_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hector_uav_msgs::RC_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.status);
      stream.next(m.valid);
      stream.next(m.axis);
      stream.next(m.axis_function);
      stream.next(m.swit);
      stream.next(m.swit_function);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RC_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hector_uav_msgs::RC_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hector_uav_msgs::RC_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid);
    s << indent << "axis[]" << std::endl;
    for (size_t i = 0; i < v.axis.size(); ++i)
    {
      s << indent << "  axis[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.axis[i]);
    }
    s << indent << "axis_function[]" << std::endl;
    for (size_t i = 0; i < v.axis_function.size(); ++i)
    {
      s << indent << "  axis_function[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.axis_function[i]);
    }
    s << indent << "swit[]" << std::endl;
    for (size_t i = 0; i < v.swit.size(); ++i)
    {
      s << indent << "  swit[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.swit[i]);
    }
    s << indent << "swit_function[]" << std::endl;
    for (size_t i = 0; i < v.swit_function.size(); ++i)
    {
      s << indent << "  swit_function[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.swit_function[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HECTOR_UAV_MSGS_MESSAGE_RC_H
