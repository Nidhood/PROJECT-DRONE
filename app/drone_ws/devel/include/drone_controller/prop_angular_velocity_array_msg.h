// Generated by gencpp from file drone_controller/prop_angular_velocity_array_msg.msg
// DO NOT EDIT!


#ifndef DRONE_CONTROLLER_MESSAGE_PROP_ANGULAR_VELOCITY_ARRAY_MSG_H
#define DRONE_CONTROLLER_MESSAGE_PROP_ANGULAR_VELOCITY_ARRAY_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <drone_controller/prop_angular_velocity_msg.h>

namespace drone_controller
{
template <class ContainerAllocator>
struct prop_angular_velocity_array_msg_
{
  typedef prop_angular_velocity_array_msg_<ContainerAllocator> Type;

  prop_angular_velocity_array_msg_()
    : props()  {
    }
  prop_angular_velocity_array_msg_(const ContainerAllocator& _alloc)
    : props(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::drone_controller::prop_angular_velocity_msg_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::drone_controller::prop_angular_velocity_msg_<ContainerAllocator> >> _props_type;
  _props_type props;





  typedef boost::shared_ptr< ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator> const> ConstPtr;

}; // struct prop_angular_velocity_array_msg_

typedef ::drone_controller::prop_angular_velocity_array_msg_<std::allocator<void> > prop_angular_velocity_array_msg;

typedef boost::shared_ptr< ::drone_controller::prop_angular_velocity_array_msg > prop_angular_velocity_array_msgPtr;
typedef boost::shared_ptr< ::drone_controller::prop_angular_velocity_array_msg const> prop_angular_velocity_array_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator1> & lhs, const ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator2> & rhs)
{
  return lhs.props == rhs.props;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator1> & lhs, const ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b2c9f426c481da0990f4731d761f6df3";
  }

  static const char* value(const ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb2c9f426c481da09ULL;
  static const uint64_t static_value2 = 0x90f4731d761f6df3ULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_controller/prop_angular_velocity_array_msg";
  }

  static const char* value(const ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prop_angular_velocity_msg[] props\n"
"\n"
"================================================================================\n"
"MSG: drone_controller/prop_angular_velocity_msg\n"
"string prop_name\n"
"float64 angular_velocity\n"
;
  }

  static const char* value(const ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.props);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct prop_angular_velocity_array_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_controller::prop_angular_velocity_array_msg_<ContainerAllocator>& v)
  {
    s << indent << "props[]" << std::endl;
    for (size_t i = 0; i < v.props.size(); ++i)
    {
      s << indent << "  props[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::drone_controller::prop_angular_velocity_msg_<ContainerAllocator> >::stream(s, indent + "    ", v.props[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_CONTROLLER_MESSAGE_PROP_ANGULAR_VELOCITY_ARRAY_MSG_H
